{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport MapView, { Heatmap } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useState } from 'react/cjs/react.development';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function heatMap(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(route.params.name),\n      _useState2 = _slicedToArray(_useState, 2),\n      sstate = _useState2[0],\n      setState = _useState2[1];\n\n  var lat = 47.751076;\n  var lng = -120.740135;\n  var DNI = 4;\n  getcoords();\n  var points = [{\n    latitude: 40.7828,\n    longitude: -74.0065,\n    weight: 1\n  }, {\n    latitude: 47.751076,\n    longitude: -120.740135,\n    weight: 1\n  }];\n  lats = lat + 10;\n  lngs = lng + 10;\n\n  for (var i = lat; i < lats; i += 0.2) {\n    for (var l = lng; l < lngs; l += 0.2) {\n      getDNI();\n    }\n\n    var Obj = {};\n    Obj['latitude'] = i;\n    Obj['longitude'] = l;\n    Obj['weight'] = 1;\n    points.push(Obj);\n  }\n\n  console.log(points);\n  var state = {\n    initialPosition: {\n      latitude: 37.0902,\n      longitude: -95.7129,\n      latitudeDelta: 57,\n      longitudeDelta: 57\n    }\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(MapView, {\n      provider: \"google\",\n      style: styles.map,\n      initialRegion: state.initialPosition,\n      children: _jsx(Heatmap, {\n        points: points,\n        radius: 40,\n        opacity: 1,\n        gradient: {\n          colors: [\"black\", \"purple\", \"red\", \"orange\", \"white\"],\n          startPoints: Platform.OS === 'ios' ? [0.01, 0.04, 0.1, 0.45, 0.5] : [0.1, 0.25, 0.5, 0.75, 1],\n          colorMapSize: 2000\n        }\n      })\n    })\n  });\n\n  function getDNI() {\n    var options = {\n      method: 'GET',\n      url: 'https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=0mnx2OSLok4UiEoaajb0fh4j2YoFOznGfGHZS78j&lat=' + lat + '&lon=' + lng\n    };\n    console.log(options.url);\n    axios.request(options).then(function (response) {\n      DNI = response.data.outputs.avg_dni.annual;\n    }).catch(function (error) {\n      console.error(error);\n    });\n    console.log(lat);\n  }\n\n  function getcoords() {\n    var options = {\n      method: 'GET',\n      url: 'http://open.mapquestapi.com/geocoding/v1/address?key=saD6wA8skX1MAzw7nKIyqh9LhoxZ0a46&location=' + sstate\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data.results[0].locations[0].latLng.lat);\n      lat = response.data.results[0].locations[0].latLng.lat;\n      lng = response.data.results[0].locations[0].latLng.lng;\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["C:/Users/Adith/sp/screens/heatMap.js"],"names":["React","MapView","Heatmap","useState","axios","AsyncStorage","heatMap","route","params","name","sstate","setState","lat","lng","DNI","getcoords","points","latitude","longitude","weight","lats","lngs","i","l","getDNI","Obj","push","console","log","state","initialPosition","latitudeDelta","longitudeDelta","styles","container","map","colors","startPoints","Platform","OS","colorMapSize","options","method","url","request","then","response","data","outputs","avg_dni","annual","catch","error","results","locations","latLng","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport MapView, { Heatmap } from 'react-native-maps';\r\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\r\n//import { points } from '../points';\r\nimport { useState } from 'react/cjs/react.development';\r\nimport axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\n\r\nexport function heatMap({route}) {\r\n  const [sstate, setState] = useState(route.params.name)\r\n  var lat = 47.751076\r\n  var lng = -120.740135\r\n  var DNI = 4\r\n  getcoords()\r\n  \r\n  var points = [\r\n    \r\n    { latitude: 40.7828, longitude: -74.0065, weight: 1 },\r\n    { latitude: 47.751076, longitude: -120.740135, weight: 1 }\r\n  \r\n  ];\r\n  lats = lat + 10\r\n  lngs = lng + 10\r\n  for (var i = lat; i < lats; i+=0.2) {\r\n    for (var l = lng; l < lngs; l+=0.2)\r\n      getDNI()\r\n      var Obj = {};\r\n      Obj['latitude'] = i;\r\n      Obj['longitude'] = l;\r\n      \r\n      Obj['weight'] = 1;\r\n      \r\n      points.push(Obj)\r\n  }\r\n  \r\n  console.log(points)\r\n\r\n  \r\n  \r\n  \r\n  const state = {\r\n    initialPosition: {\r\n      latitude: 37.0902,\r\n      longitude: -95.7129,\r\n      latitudeDelta: 57,\r\n      longitudeDelta: 57\r\n    }\r\n  }\r\n  \r\n  \r\n  \r\n    return (\r\n      <View style={styles.container}>\r\n\r\n        <MapView\r\n          provider=\"google\"\r\n          \r\n          style={styles.map}\r\n          initialRegion={state.initialPosition}>\r\n          <Heatmap\r\n            points={points}\r\n            radius={40}\r\n            opacity={1}\r\n            gradient={{\r\n              colors: [\"black\", \"purple\", \"red\", \"orange\", \"white\"],\r\n              startPoints: Platform.OS === 'ios' ? [0.01, 0.04, 0.1, 0.45, 0.5] :\r\n                [0.1, 0.25, 0.5, 0.75, 1],\r\n              colorMapSize: 2000\r\n            }}\r\n          >\r\n          </Heatmap>\r\n        </MapView>\r\n      </View>\r\n    );\r\n    function getDNI() {\r\n        \r\n      var options = {\r\n        method: 'GET',\r\n        url: 'https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=0mnx2OSLok4UiEoaajb0fh4j2YoFOznGfGHZS78j&lat=' +lat + '&lon=' + lng,\r\n        \r\n      };\r\n      console.log(options.url)\r\n      axios.request(options).then(function (response) {\r\n          \r\n        DNI = response.data.outputs.avg_dni.annual\r\n        \r\n  \r\n  \r\n      }).catch(function (error) {\r\n        console.error(error);\r\n      });\r\n      console.log(lat)\r\n  }\r\n    function getcoords() {\r\n        \r\n  \r\n  \r\n      var options = {\r\n        method: 'GET',\r\n        url: 'http://open.mapquestapi.com/geocoding/v1/address?key=saD6wA8skX1MAzw7nKIyqh9LhoxZ0a46&location=' + sstate,\r\n        \r\n      };\r\n    \r\n      axios.request(options).then(function (response) {\r\n          console.log(response.data.results[0].locations[0].latLng.lat)\r\n          lat = response.data.results[0].locations[0].latLng.lat\r\n          lng = response.data.results[0].locations[0].latLng.lng\r\n    \r\n    \r\n      }).catch(function (error) {\r\n        console.error(error);\r\n      });\r\n    }\r\n  \r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  map: {\r\n    width: Dimensions.get('window').width,\r\n    height: Dimensions.get('window').height,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}