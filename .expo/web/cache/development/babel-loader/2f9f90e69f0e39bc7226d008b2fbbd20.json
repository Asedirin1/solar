{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport MapView, { Heatmap } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useState } from 'react/cjs/react.development';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function heatMap() {\n  var _useState = useState(\"WA\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      sstate = _useState2[0],\n      setState = _useState2[1];\n\n  var coords = getcoords();\n  var lat = 0;\n  var lng = 0;\n  var DNI = getDNI();\n  console.log(DNI);\n  var pointss = [];\n  return _jsx(View, {\n    style: styles.container\n  });\n\n  function getDNI() {\n    var options = {\n      method: 'GET',\n      url: 'https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=0mnx2OSLok4UiEoaajb0fh4j2YoFOznGfGHZS78j&lat=' + lat + '&lon=' + lng\n    };\n    console.log(options.url);\n    axios.request(options).then(function (response) {\n      return response;\n    }).catch(function (error) {\n      console.error(error);\n    });\n    console.log(lat);\n  }\n\n  function getcoords() {\n    var options = {\n      method: 'GET',\n      url: 'http://open.mapquestapi.com/geocoding/v1/address?key=saD6wA8skX1MAzw7nKIyqh9LhoxZ0a46&location=' + sstate\n    };\n    axios.request(options).then(function (response) {\n      return response;\n      lat = response.data.results[0].locations[0].latLng.lat;\n      lng = response.data.results[0].locations[0].latLng.lng;\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["C:/Users/Adith/sp/screens/heatMap.js"],"names":["React","MapView","Heatmap","useState","axios","AsyncStorage","heatMap","sstate","setState","coords","getcoords","lat","lng","DNI","getDNI","console","log","pointss","styles","container","options","method","url","request","then","response","catch","error","data","results","locations","latLng","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","map","width","Dimensions","get","height"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,IAAkBC,OAAlB,QAAiC,mBAAjC;;;;;AAGA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;AAIA,OAAO,SAASC,OAAT,GAAmB;AACxB,kBAA2BH,QAAQ,CAAC,IAAD,CAAnC;AAAA;AAAA,MAAOI,MAAP;AAAA,MAAeC,QAAf;;AACA,MAAIC,MAAM,GAAGC,SAAS,EAAtB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGC,MAAM,EAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,MAAII,OAAO,GAAG,EAAd;AAQE,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,IADF;;AAQA,WAASL,MAAT,GAAkB;AAEhB,QAAIM,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,GAAG,EAAE,sHAAqHX,GAArH,GAA2H,OAA3H,GAAqIC;AAF9H,KAAd;AAKAG,IAAAA,OAAO,CAACC,GAAR,CAAYI,OAAO,CAACE,GAApB;AACAlB,IAAAA,KAAK,CAACmB,OAAN,CAAcH,OAAd,EAAuBI,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;AAE9C,aAAOA,QAAP;AAID,KAND,EAMGC,KANH,CAMS,UAAUC,KAAV,EAAiB;AACxBZ,MAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACD,KARD;AAUAZ,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACH;;AAOD,WAASD,SAAT,GAAqB;AAInB,QAAIU,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,GAAG,EAAE,oGAAoGf;AAF7F,KAAd;AAMAH,IAAAA,KAAK,CAACmB,OAAN,CAAcH,OAAd,EAAuBI,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;AAC5C,aAAOA,QAAP;AAEAd,MAAAA,GAAG,GAAGc,QAAQ,CAACG,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,SAAzB,CAAmC,CAAnC,EAAsCC,MAAtC,CAA6CpB,GAAnD;AACAC,MAAAA,GAAG,GAAGa,QAAQ,CAACG,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBC,SAAzB,CAAmC,CAAnC,EAAsCC,MAAtC,CAA6CnB,GAAnD;AAGH,KAPD,EAOGc,KAPH,CAOS,UAAUC,KAAV,EAAiB;AACxBZ,MAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACD,KATD;AAUD;AAEF;AAGD,IAAMT,MAAM,GAAGc,UAAU,CAACC,MAAX,CAAkB;AAC/Bd,EAAAA,SAAS,EAAE;AACTe,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAD7B;AAEHG,IAAAA,MAAM,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC;AAF9B;AAP0B,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport MapView, { Heatmap } from 'react-native-maps';\r\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\r\n//import { points } from '../points';\r\nimport { useState } from 'react/cjs/react.development';\r\nimport axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\n\r\nexport function heatMap() {\r\n  const [sstate, setState] = useState(\"WA\")\r\n  var coords = getcoords()\r\n  var lat = 0\r\n  var lng = 0\r\n  var DNI = getDNI()\r\n  console.log(DNI)\r\n  var pointss = [];\r\n\r\n  \r\n \r\n\r\n  \r\n  \r\n  \r\n    return (\r\n      <View style={styles.container}>\r\n\r\n        \r\n      </View>\r\n    );\r\n\r\n    \r\n    function getDNI() {\r\n        \r\n      var options = {\r\n        method: 'GET',\r\n        url: 'https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=0mnx2OSLok4UiEoaajb0fh4j2YoFOznGfGHZS78j&lat=' +lat + '&lon=' + lng,\r\n        \r\n      };\r\n      console.log(options.url)\r\n      axios.request(options).then(function (response) {\r\n          \r\n        return response\r\n        \r\n  \r\n  \r\n      }).catch(function (error) {\r\n        console.error(error);\r\n      });\r\n      \r\n      console.log(lat)\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  function getcoords() {\r\n      \r\n\r\n\r\n    var options = {\r\n      method: 'GET',\r\n      url: 'http://open.mapquestapi.com/geocoding/v1/address?key=saD6wA8skX1MAzw7nKIyqh9LhoxZ0a46&location=' + sstate,\r\n      \r\n    };\r\n  \r\n    axios.request(options).then(function (response) {\r\n        return response\r\n        \r\n        lat = response.data.results[0].locations[0].latLng.lat\r\n        lng = response.data.results[0].locations[0].latLng.lng\r\n  \r\n  \r\n    }).catch(function (error) {\r\n      console.error(error);\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  map: {\r\n    width: Dimensions.get('window').width,\r\n    height: Dimensions.get('window').height,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}