{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport MapView, { Heatmap } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useState } from 'react/cjs/react.development';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function heatMap() {\n  var lat = 0;\n  var lng = 0;\n  getDNI().then(function (res) {\n    return console.log(res);\n  });\n  return _jsx(View, {\n    style: styles.container\n  });\n\n  function getDNI() {\n    var res;\n    return _regeneratorRuntime.async(function getDNI$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios({\n              url: 'https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=0mnx2OSLok4UiEoaajb0fh4j2YoFOznGfGHZS78j&lat=' + lat + '&lon=' + lng,\n              method: 'get',\n              timeout: 1000\n            }));\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  function getcoords() {\n    var options = {\n      method: 'GET',\n      url: 'http://open.mapquestapi.com/geocoding/v1/address?key=saD6wA8skX1MAzw7nKIyqh9LhoxZ0a46&location=' + sstate\n    };\n    axios.request(options).then(function (response) {\n      console.log(response.data.results[0].locations[0].latLng.lat);\n      responses = response;\n      lat = response.data.results[0].locations[0].latLng.lat;\n      lng = response.data.results[0].locations[0].latLng.lng;\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["C:/Users/Adith/sp/screens/heatMap.js"],"names":["React","MapView","Heatmap","useState","axios","AsyncStorage","heatMap","lat","lng","getDNI","then","res","console","log","styles","container","url","method","timeout","data","error","getcoords","options","sstate","request","response","results","locations","latLng","responses","catch","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","map","width","Dimensions","get","height"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,IAAkBC,OAAlB,QAAiC,mBAAjC;;;;;AAGA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;AAIA,OAAO,SAASC,OAAT,GAAmB;AACxB,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACAC,EAAAA,MAAM,GACLC,IADD,CACM,UAAAC,GAAG;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,GADT;AAwDE,SAEE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC;AAApB,IAFF;;AAQA,WAAeN,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEqBL,KAAK,CAAC;AACjBY,cAAAA,GAAG,EAAE,sHAAqHT,GAArH,GAA2H,OAA3H,GAAqIC,GADzH;AAEjBS,cAAAA,MAAM,EAAE,KAFS;AAGjBC,cAAAA,OAAO,EAAE;AAHQ,aAAD,CAF1B;;AAAA;AAESP,YAAAA,GAFT;AAAA,6CAUaA,GAAG,CAACQ,IAVjB;;AAAA;AAAA;AAAA;AAaMP,YAAAA,OAAO,CAACQ,KAAR;;AAbN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBF,WAASC,SAAT,GAAqB;AAInB,QAAIC,OAAO,GAAG;AACZL,MAAAA,MAAM,EAAE,KADI;AAEZD,MAAAA,GAAG,EAAE,oGAAoGO;AAF7F,KAAd;AAMAnB,IAAAA,KAAK,CAACoB,OAAN,CAAcF,OAAd,EAAuBZ,IAAvB,CAA4B,UAAUe,QAAV,EAAoB;AAC5Cb,MAAAA,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAACN,IAAT,CAAcO,OAAd,CAAsB,CAAtB,EAAyBC,SAAzB,CAAmC,CAAnC,EAAsCC,MAAtC,CAA6CrB,GAAzD;AACAsB,MAAAA,SAAS,GAAGJ,QAAZ;AACAlB,MAAAA,GAAG,GAAGkB,QAAQ,CAACN,IAAT,CAAcO,OAAd,CAAsB,CAAtB,EAAyBC,SAAzB,CAAmC,CAAnC,EAAsCC,MAAtC,CAA6CrB,GAAnD;AACAC,MAAAA,GAAG,GAAGiB,QAAQ,CAACN,IAAT,CAAcO,OAAd,CAAsB,CAAtB,EAAyBC,SAAzB,CAAmC,CAAnC,EAAsCC,MAAtC,CAA6CpB,GAAnD;AAGH,KAPD,EAOGsB,KAPH,CAOS,UAAUV,KAAV,EAAiB;AACxBR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD,KATD;AAUD;AAEF;AAGD,IAAMN,MAAM,GAAGiB,UAAU,CAACC,MAAX,CAAkB;AAC/BjB,EAAAA,SAAS,EAAE;AACTkB,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAD7B;AAEHG,IAAAA,MAAM,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC;AAF9B;AAP0B,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport MapView, { Heatmap } from 'react-native-maps';\r\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\r\n//import { points } from '../points';\r\nimport { useState } from 'react/cjs/react.development';\r\nimport axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n\r\n\r\nexport function heatMap() {\r\n  var lat = 0\r\n  var lng = 0\r\n  getDNI()\r\n  .then(res => console.log(res))\r\n  /*\r\n  const [sstate, setState] = useState(\"WA\")\r\n  var lat = 0\r\n  var lng = 0\r\n  var DNI = 0\r\n  getcoords()\r\n  var pointss = [];\r\n  if (getData() == null) {\r\n    storeData(pointss)\r\n  }\r\n  else {\r\n    pointss = getData();\r\n  }\r\n  const storeData = async (value) => {\r\n    try {\r\n      \r\n      await AsyncStorage.setItem('points', value)\r\n    } catch (e) {\r\n      \r\n    }\r\n  }\r\n  \r\n \r\nconst getData = async () => {\r\n  try {\r\n    const array = await AsyncStorage.getItem('@storage_Key')\r\n    return array;\r\n  } catch(e) {\r\n    \r\n  }\r\n}\r\n  for (let i = 0; i < 1; i++) {\r\n      getDNI();\r\n      \r\n      var Obj = {};\r\n      Obj['latitude'] = lat;\r\n      Obj['longitude'] = lng;\r\n      Obj['weight'] = DNI;\r\n      pointss.push(Obj);\r\n      lat+=1\r\n      lng+=-1\r\n  }\r\n  console.log(pointss)\r\n  const state = {\r\n    initialPosition: {\r\n      latitude: 37.0902,\r\n      longitude: -95.7129,\r\n      latitudeDelta: 57,\r\n      longitudeDelta: 57\r\n    }\r\n  }\r\n  */\r\n  \r\n  \r\n    return (\r\n\r\n      <View style={styles.container}>\r\n   \r\n        \r\n      </View>\r\n    );\r\n\r\n    async function getDNI() {\r\n      try {\r\n         let res = await axios({\r\n              url: 'https://developer.nrel.gov/api/solar/solar_resource/v1.json?api_key=0mnx2OSLok4UiEoaajb0fh4j2YoFOznGfGHZS78j&lat=' +lat + '&lon=' + lng,\r\n              method: 'get',\r\n              timeout: 1000,\r\n              \r\n          })\r\n           \r\n          \r\n          return res.data\r\n      }\r\n      catch (err) {\r\n          console.error(err);\r\n      }\r\n  }\r\n  \r\n  \r\n    \r\n\r\n  \r\n\r\n\r\n\r\n\r\n  function getcoords() {\r\n      \r\n\r\n\r\n    var options = {\r\n      method: 'GET',\r\n      url: 'http://open.mapquestapi.com/geocoding/v1/address?key=saD6wA8skX1MAzw7nKIyqh9LhoxZ0a46&location=' + sstate,\r\n      \r\n    };\r\n  \r\n    axios.request(options).then(function (response) {\r\n        console.log(response.data.results[0].locations[0].latLng.lat)\r\n        responses = response\r\n        lat = response.data.results[0].locations[0].latLng.lat\r\n        lng = response.data.results[0].locations[0].latLng.lng\r\n  \r\n  \r\n    }).catch(function (error) {\r\n      console.error(error);\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  map: {\r\n    width: Dimensions.get('window').width,\r\n    height: Dimensions.get('window').height,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}